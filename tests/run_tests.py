#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ–Ω–¥–µ—Ä–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫ (—Å –∑–∞–≥–ª—É—à–∫–æ–π –¥–ª—è CI)
"""

import unittest
import sys
import os
import time
import requests

sys.path.insert(0, os.path.dirname(__file__))

IS_CI = os.environ.get("CI", "").lower() == "true" or not sys.stdin.isatty()

SERVICES = {
    "API Gateway": "http://localhost:5000/health",
    "Frontend": "http://localhost:8080",
    "Auth Service": "http://localhost:5001/auth/health",
    "User Service": "http://localhost:5002/users/health",
    "Tender Service": "http://localhost:5003/tenders/health",
}


def _http_ok(url, timeout=3.0):
    try:
        resp = requests.get(url, timeout=timeout, allow_redirects=True)
        return 200 <= resp.status_code < 400
    except requests.RequestException:
        return False


def check_services_availability(max_wait=30, interval=2.0):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("–ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–ï–†–í–ò–°–û–í...")
    attempts = int(max_wait / interval) if IS_CI else 1

    statuses = {}
    for attempt in range(1, attempts + 1):
        all_ok = True
        for name, url in SERVICES.items():
            ok = _http_ok(url)
            statuses[name] = ok
            if not ok:
                all_ok = False
        line = " | ".join(f"{n}:{'OK' if v else '...'}" for n, v in statuses.items())
        print(f"  –ü–æ–ø—ã—Ç–∫–∞ {attempt}: {line}")
        if all_ok:
            print("–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã.")
            return True
        time.sleep(interval)
    return False


def ask_continue(prompt="   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ? (y/n): "):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤ CI"""
    if IS_CI:
        print("CI-—Ä–µ–∂–∏–º: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return True
    try:
        return input(prompt).strip().lower() == "y"
    except EOFError:
        print("–ù–µ—Ç stdin: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        return True


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–û–ò–°–ö –ò –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í...")
    print("=" * 60)
    loader = unittest.TestLoader()
    start_dir = os.path.dirname(__file__)
    suite = loader.discover(start_dir, pattern="test_*.py")
    runner = unittest.TextTestRunner(verbosity=2, stream=sys.stdout)
    return runner.run(suite)


if __name__ == "__main__":
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –¢–ï–ù–î–ï–†–ù–´–• –ó–ê–ö–£–ü–û–ö")
    print("=" * 60)

    services_ok = check_services_availability()

    if not services_ok:
        print("\n–í–ù–ò–ú–ê–ù–ò–ï: –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        print("   –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã (docker compose up -d).")

        # üëá –ó–∞–≥–ª—É—à–∫–∞: –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –æ—à–∏–±–∫–∏
        print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞).")
        sys.exit(0)

    # –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    start_time = time.time()
    main_result = run_all_tests()
    end_time = time.time()

    print("\n" + "=" * 60)
    print("–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)

    total_tests = main_result.testsRun
    total_failures = len(main_result.failures)
    total_errors = len(main_result.errors)

    print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫.")
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_failures}")
    print(f"–û—à–∏–±–æ–∫: {total_errors}")

    if total_failures == 0 and total_errors == 0:
        print("–í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        sys.exit(0)
    else:
        print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò.")
        sys.exit(1)
